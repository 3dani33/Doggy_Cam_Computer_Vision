"""
Evaluate the CSV File generated by `run_algorithm.py`
read csv file and calculates mean over all annotated 1's and mean over all annotated 0's"""

import numpy as np
import os
import plac
import matplotlib.pyplot as plt


@plac.pos('file', 'the CSV-File to be analized')

def calculate_means(file):


    filename = os.path.basename(file)
    print('Analyzing file: {}'.format(filename))

    array = np.loadtxt(open(file, 'rb'), delimiter=',')

    truecounter = 0
    falsecounter = 0
    truesum = 0
    falsesum = 0
    emptytrue = 0
    emptyfalse = 0
    mintrue = array[0,1]
    j = 0
    while(True):
        mintrue = array[j,1]
        if(array[j,1] != 0):
            break
        j +=1
        
    for i in range(len(array)):
        if(array[i,1] == 0):
            if(array[i,0] == 1 ):
                emptytrue += 1
            elif(array[i,0] == 0):
                emptyfalse += 1
        elif(array[i,0]) == 1:
            truecounter += 1
            truesum += array[i,1]
            if(array[i,1]<mintrue):
                mintrue = array[i,1]
        elif(array[i,0]) == 0:
            falsecounter += 1
            falsesum += array[i,1]

    print('{} frames skipped due to empty intensity. {} were active frames, {} were passive frames'.format(len(array)+emptyfalse+emptytrue, emptytrue, emptyfalse))

    print('active mean: {}, passive mean: {}'.format(truesum/truecounter, falsesum/falsecounter))

    print('the middle-threshold would be at {}'.format(truesum/truecounter - falsesum/falsecounter))

    print('minimal active value: {}'.format(mintrue))

    print('Printing Histogram...')

    plt.hist(np.delete(array.T,0,0).T)
    plt.title('Histogram of intensities')
    plt.ylabel('n')
    plt.xlabel('Intensity')

    plt.show()

    print('Printing normalized histogram')
    norm = array[:,1]/max(array[:,1])
    
    plt.hist(norm)
    plt.xlabel('normalized intensities')
    plt.ylabel('n')
    plt.title('normalized histogram')

    plt.show()

    plt.hist(np.where(array[0] == True))



if __name__ == '__main__':
	plac.call(calculate_means)